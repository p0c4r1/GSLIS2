unit UnitPendaftaran;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics,
  Controls, Forms, uniGUITypes, uniGUIAbstractClasses,
  uniGUIClasses, uniGUIForm, uniEdit, uniLabel, uniGUIBaseClasses, uniPanel,
  uniBasicGrid, uniDBGrid, uniButton, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, uniMultiItem, uniComboBox,
  uniDBComboBox, uniDBLookupComboBox, uniMemo, uniStringGrid, frxClass,
  frxDBSet, frxExportPDF, Vcl.Imaging.jpeg, uniImage, uniPageControl,
  uniCheckBox, uniDateTimePicker, DateUtils, uniTreeView;

type
  TSArray = array of String;

  TfrmPendaftaran = class(TUniForm)
    UniPanel1: TUniPanel;
    btnCariPasien: TUniButton;
    btnCariDokter: TUniButton;
    edTest: TUniButton;
    btnDetail: TUniButton;
    btnDelete: TUniButton;
    btnDiscount: TUniButton;
    btnBayar: TUniButton;
    btnClear: TUniButton;
    btnNoReg: TUniButton;
    QTest: TFDQuery;
    DSTest: TDataSource;
    QCheckTest: TFDQuery;
    QEditPasien: TFDQuery;
    btnEditPasien: TUniButton;
    btnPTerakhir: TUniButton;
    QPTerakhir: TFDQuery;
    QPTerakhirDtl: TFDQuery;
    frxRepNota: TfrxReport;
    frxPDFExport1: TfrxPDFExport;
    frxDBDataset1: TfrxDBDataset;
    QNotaCopy: TFDQuery;
    QPaket: TFDQuery;
    DSPaket: TDataSource;
    QPaketDetail: TFDQuery;
    QNotaCopyheader_id: TIntegerField;
    QNotaCopylevel: TIntegerField;
    QNotaCopypemeriksaan: TStringField;
    QNotaCopyharga: TBCDField;
    QNotaCopycetak_nota: TStringField;
    QNotaCopyada_harga: TStringField;
    QNotaCopynomor: TStringField;
    QNotaCopynama: TStringField;
    QNotaCopytelepon: TStringField;
    QNotaCopydokter: TStringField;
    QNotaCopytipe_pasien: TStringField;
    QNotaCopyalamat: TStringField;
    QNotaCopyjumlah: TBCDField;
    QNotaCopyid_pasien: TStringField;
    QNotaCopycatatan: TStringField;
    QNotaCopyasal: TStringField;
    QNotaCopyansuransi: TStringField;
    QNotaCopyuser_name: TStringField;
    QNotaCopytanggal: TDateTimeField;
    QNotaCopydiskon: TBCDField;
    QNotaCopydisc_amount: TBCDField;
    QNotaCopysub_total: TBCDField;
    QNotaCopytagihan: TBCDField;
    QNotaCopyharga_total: TFMTBCDField;
    QNotaCopydisc_pct: TBCDField;
    QNotaCopyflgLunas: TStringField;
    QNotaCopyhp: TStringField;
    QNotaCopyket_tgl_selesai_date: TDateTimeField;
    QNotaCopyperujuk: TStringField;
    QNotaCopycatatan_pasien: TMemoField;
    QTmp: TFDQuery;
    pnlHeader: TUniContainerPanel;
    pnlPasien: TUniPanel;
    pnlOrderDem: TUniPanel;
    edDokter: TUniEdit;
    UniLabel6: TUniLabel;
    edDokterId: TUniEdit;
    mmInternalNote: TUniMemo;
    UniContainerPanel2: TUniContainerPanel;
    cbTest: TUniDBLookupComboBox;
    cbPaket: TUniDBLookupComboBox;
    UniLabel19: TUniLabel;
    UniLabel20: TUniLabel;
    UniContainerPanel3: TUniContainerPanel;
    UniContainerPanel5: TUniContainerPanel;
    UniContainerPanel4: TUniContainerPanel;
    UniLabel11: TUniLabel;
    edSubTotal: TUniEdit;
    edDiscAmount: TUniEdit;
    edDiscount: TUniFormattedNumberEdit;
    UniLabel12: TUniLabel;
    UniLabel13: TUniLabel;
    edTotal: TUniEdit;
    lblUangMuka: TUniLabel;
    edUangMuka: TUniEdit;
    UniContainerPanel6: TUniContainerPanel;
    pcPasien: TUniPageControl;
    tsDemog: TUniTabSheet;
    pnlFoto: TUniContainerPanel;
    imFotoPasien: TUniImage;
    pnlPasienData: TUniContainerPanel;
    UniLabel1: TUniLabel;
    edPasienId: TUniEdit;
    edNama: TUniEdit;
    UniLabel2: TUniLabel;
    edJenisKelaminId: TUniEdit;
    edKelamin: TUniEdit;
    UniLabel3: TUniLabel;
    edAlamat: TUniEdit;
    UniLabel4: TUniLabel;
    edTelp: TUniEdit;
    edHp: TUniEdit;
    UniLabel5: TUniLabel;
    edPatientID: TUniEdit;
    edUmur: TUniEdit;
    UniTabSheet2: TUniTabSheet;
    pnlOrderKirimHasil: TUniContainerPanel;
    cbHasilEmail: TUniCheckBox;
    cbHasilWa: TUniCheckBox;
    edHasilEmail: TUniEdit;
    edHasilWa: TUniEdit;
    dtJanjiHasil: TUniDateTimePicker;
    UniLabel8: TUniLabel;
    UniContainerPanel1: TUniContainerPanel;
    UniContainerPanel7: TUniContainerPanel;
    GrdPemeriksaan: TUniStringGrid;
    grdInterview: TUniStringGrid;
    mmCatatanPasien: TUniMemo;
    UniTabSheet1: TUniTabSheet;
    UniButton1: TUniButton;
    tvHistori: TUniTreeView;
    QPasien: TFDQuery;
    QInt: TFDQuery;
    cbJanjiHasil: TUniCheckBox;
    pcOrder: TUniPageControl;
    UniTabSheet3: TUniTabSheet;
    utInternal: TUniTabSheet;
    cbKirimPerujuk: TUniCheckBox;
    cbKirimRumah: TUniCheckBox;
    cbHasilAmbil: TUniCheckBox;
    procedure UniFormKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btnClearClick(Sender: TObject);
    procedure btnCariPasienClick(Sender: TObject);
    procedure UniFormCreate(Sender: TObject);
    procedure edCariTestChange(Sender: TObject);
    procedure edCariTestKeyPress(Sender: TObject; var Key: Char);
    procedure GrdPemeriksaanDrawCell(Sender: TObject; ACol, ARow: Integer;
      var Value: string; Attribs: TUniCellAttribs);
    procedure edDiscountKeyPress(Sender: TObject; var Key: Char);
    procedure edDiscountChange(Sender: TObject);
    procedure btnCariDokterClick(Sender: TObject);
    procedure edTestClick(Sender: TObject);
    procedure btnDetailClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure btnDiscountClick(Sender: TObject);
    procedure btnBayarClick(Sender: TObject);
    procedure uniDBGridKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btnNoRegClick(Sender: TObject);
    procedure edPatientIDKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edDiscAmountChange(Sender: TObject);
    procedure edDiscAmountKeyPress(Sender: TObject; var Key: Char);
    procedure btnEditPasienClick(Sender: TObject);
    procedure btnPTerakhirClick(Sender: TObject);
    procedure btnTglSelesaiClick(Sender: TObject);
    procedure cbPaketSelect(Sender: TObject);
    procedure UniFormBeforeShow(Sender: TObject);
    procedure cbTestKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure cbHasilEmailChange(Sender: TObject);
    procedure cbHasilWaChange(Sender: TObject);
    procedure pnlFotoClick(Sender: TObject);
    procedure pnlFotoMouseEnter(Sender: TObject);
    procedure edPasienIdChange(Sender: TObject);
    procedure UniButton1Click(Sender: TObject);
    procedure cbJanjiHasilChange(Sender: TObject);

  private
    { Private declarations }
    procedure DeleteTestCallback(Sender: TComponent; Res: Integer);

  var
    interviewArr: TSArray;
    interviewArrStr: TSArray;
    interviewArrValue: TSArray;
    length_arr: Integer;
  public
    { Public declarations }
    // procedure clear_fields();
  var
    pasien_id, tipe_pasien, urgency, asal, penjamin, ruangan, tipe_hasil,
      call_form: string;
    b_clear: boolean;
    order_hdr_id: string;
    home_service_id: Integer;
    tgl_hasil: TDateTime;
    catatan_hasil: string;
    perujuk: string;
  end;

function frmPendaftaran: TfrmPendaftaran;

implementation

{$R *.dfm}

uses
  MainModule, uniGUIApplication, UnitCariPasien, UnitCariDokter, UnitBayar,
  UnitPasienBaru, UnitTanggalSelesai, ServerModule, UnitReportDisplay, UnitQz,
  UnitFotoPasien, UnitUtils;

function checkInterviewKosong: boolean;
var
  I, countKosong: Integer;
begin
  countKosong := 0;
  // cek semua kode test
  for I := 1 to frmPendaftaran.grdInterview.rowcount do
  begin
    if frmPendaftaran.grdInterview.Cells[0, I] <> '' then
    begin
      if frmPendaftaran.grdInterview.Cells[1, I] = '' then
      begin
        countKosong := countKosong + 1;
      end
      else
    end;
  end;
  if countKosong > 0 then
    Result := True
  else
    Result := False;
end;

procedure loadInterview;
var
  I, J: Integer;
begin
  if not frmPendaftaran.QInt.Active then
    frmPendaftaran.QInt.Active := True;

  // kosongkan
  for I := 1 to frmPendaftaran.grdInterview.rowcount do
  begin
    for J := 0 to frmPendaftaran.grdInterview.ColCount do
      frmPendaftaran.grdInterview.Cells[J, I] := '';

  end;

  if frmPendaftaran.QInt.RecordCount > 0 then
  begin

    frmPendaftaran.grdInterview.rowcount := 2;

    // cek semua kode test
    for I := 1 to frmPendaftaran.GrdPemeriksaan.rowcount do
    begin
      frmPendaftaran.QInt.First;
      while not frmPendaftaran.QInt.Eof do
      begin
        if frmPendaftaran.QInt.FieldByName('kode')
          .AsString = frmPendaftaran.GrdPemeriksaan.Cells[0, I] then
        begin
          // tambah kan ke grid interview
          frmPendaftaran.grdInterview.rowcount :=
            frmPendaftaran.grdInterview.rowcount + 1;
          frmPendaftaran.grdInterview.Cells
            [0, frmPendaftaran.grdInterview.rowcount - 2] :=
            frmPendaftaran.QInt.FieldByName('pertanyaan').AsString;

        end;
        frmPendaftaran.QInt.Next;

      end;

    end;

  end;
end;

procedure clear_fields();
var
  I, J: Integer;
begin
  frmPendaftaran.edDokter.Text := '-';
  frmPendaftaran.edSubTotal.Text := '0';
  frmPendaftaran.edDiscount.Text := '0.00';
  frmPendaftaran.edDiscAmount.Text := '0';
  frmPendaftaran.edTotal.Text := '0';

  // pasien
  frmPendaftaran.edPasienId.Clear;
  frmPendaftaran.edNama.Clear;
  frmPendaftaran.edJenisKelaminId.Clear;
  frmPendaftaran.edKelamin.Clear;
  frmPendaftaran.edUmur.Clear;
  frmPendaftaran.edAlamat.Clear;
  frmPendaftaran.edTelp.Clear;
  frmPendaftaran.edHp.Clear;
  frmPendaftaran.edPatientID.Clear;

  // memo
  // frmPendaftaran.mmCatatanPasien.Clear;
  frmPendaftaran.mmInternalNote.Clear;

  if frmPendaftaran.QTest.Active then
    frmPendaftaran.QTest.Active := False;
  frmPendaftaran.QTest.Active := True;

  for I := 0 to frmPendaftaran.GrdPemeriksaan.rowcount do
  begin
    for J := 0 to frmPendaftaran.GrdPemeriksaan.ColCount do
      frmPendaftaran.GrdPemeriksaan.Cells[J, I] := '';
  end;

  frmPendaftaran.GrdPemeriksaan.ColCount := 4;
  frmPendaftaran.GrdPemeriksaan.rowcount := 2;
  frmPendaftaran.GrdPemeriksaan.Cells[0, 0] := 'Kode';
  frmPendaftaran.GrdPemeriksaan.Cells[1, 0] := 'Pemeriksaan';
  frmPendaftaran.GrdPemeriksaan.Cells[2, 0] := 'Harga';
  frmPendaftaran.GrdPemeriksaan.Cells[3, 0] := 'Cito';
  frmPendaftaran.GrdPemeriksaan.ColWidths[0] := 100;
  frmPendaftaran.GrdPemeriksaan.ColWidths[1] := 300;
  frmPendaftaran.GrdPemeriksaan.ColWidths[2] := 100;
  frmPendaftaran.GrdPemeriksaan.ColWidths[3] := 50;

end;

procedure calculate_total();
var
  I: Integer;
  fTotal: Currency;
  tmpStr: String;
begin
  // calculate total
  fTotal := 0;
  for I := 1 to frmPendaftaran.GrdPemeriksaan.rowcount do
  begin
    tmpStr := frmPendaftaran.GrdPemeriksaan.Cells[2, I];
    tmpStr := StringReplace(tmpStr, ',', '', [rfReplaceAll]);
    if tmpStr <> '' then
      fTotal := fTotal + StrToFloat(tmpStr);
  end;

  frmPendaftaran.edSubTotal.Text := FormatFloat('#,##0.00', fTotal);

  // discount
  tmpStr := frmPendaftaran.edDiscount.Text;
  tmpStr := StringReplace(tmpStr, ',', '', [rfReplaceAll]);
  frmPendaftaran.edDiscAmount.Text := FormatFloat('#,##0.00',
    (fTotal * (StrToFloat(tmpStr) / 100)));
  frmPendaftaran.edTotal.Text := FormatFloat('#,##0.00',
    StrToFloat(StringReplace(frmPendaftaran.edSubTotal.Text, ',', '',
    [rfReplaceAll])) - StrToFloat
    (StringReplace(frmPendaftaran.edDiscAmount.Text, ',', '', [rfReplaceAll])));

end;

procedure AddTest();
var
  I, id_tes: Integer;
  fTotal: Currency;
  tmpStr: String;
  formatSettings: TFormatSettings;
begin
  frmPendaftaran.ShowMask('Loading');
  frmPendaftaran.UniSession.Synchronize();
  // enable tes
  if frmPendaftaran.btnBayar.enabled = False then
    frmPendaftaran.btnBayar.enabled := True;

  GetLocaleFormatSettings(LOCALE_SYSTEM_DEFAULT, formatSettings);

  // cek apakah sudah ada
  for I := 1 to frmPendaftaran.GrdPemeriksaan.rowcount do
  begin
    if frmPendaftaran.GrdPemeriksaan.Cells[0, I] = frmPendaftaran.QTest.
      FieldByName('kode').AsString then
    begin
      frmPendaftaran.showMessage('Pemeriksaan sudah ada');
      exit;
    end;
  end;

  // dapatkan idnya
  if frmPendaftaran.QCheckTest.Active then
    frmPendaftaran.QCheckTest.Active := False;
  frmPendaftaran.QCheckTest.SQL.Text := ' SELECT id FROM test WHERE kode = ' +
    QuotedStr(frmPendaftaran.QTest.FieldByName('kode').AsString);
  frmPendaftaran.QCheckTest.Active := True;

  // tambahkan ke grid
  frmPendaftaran.GrdPemeriksaan.rowcount :=
    frmPendaftaran.GrdPemeriksaan.rowcount + 1;
  frmPendaftaran.GrdPemeriksaan.Cells[0, frmPendaftaran.GrdPemeriksaan.rowcount
    - 2] := frmPendaftaran.QTest.FieldByName('kode').AsString;
  frmPendaftaran.GrdPemeriksaan.Cells[1, frmPendaftaran.GrdPemeriksaan.rowcount
    - 2] := frmPendaftaran.QTest.FieldByName('nama').AsString;

  //
  // id_tes := frmPendaftaran.QCheckTest.FieldByName('id').AsInteger;

  // // ambil harga
  if frmPendaftaran.QCheckTest.Active then
    frmPendaftaran.QCheckTest.Active := False;
  frmPendaftaran.QCheckTest.SQL.Text :=
    ' SELECT harga.id,IFNULL(harga.harga,0) harga FROM harga LEFT JOIN tipe_pasien ON harga.tipe_pasien_id = tipe_pasien.id LEFT JOIN urgency ON harga.urgency_id = urgency.id WHERE '
    + ' test_id = ' + QuotedStr(frmPendaftaran.QTest.FieldByName('id').AsString)
    + ' AND tipe_pasien.id = 1  AND urgency.id = 1';
  frmPendaftaran.QCheckTest.Active := True;

  // tambahkan ke grid
  frmPendaftaran.GrdPemeriksaan.Cells[2, frmPendaftaran.GrdPemeriksaan.rowcount
    - 2] := FormatFloat('#,##0.00',
    StrToFloat(frmPendaftaran.QCheckTest.FieldByName('harga').AsString));
  // if frmPendaftaran.cbCito.ItemIndex = frmPendaftaran.cbCito.Items.IndexOf
  // ('NORMAL') then
  frmPendaftaran.GrdPemeriksaan.Cells[3, frmPendaftaran.GrdPemeriksaan.rowcount
    - 2] := 'N';
  // else
  // frmPendaftaran.GrdPemeriksaan.Cells
  // [3, frmPendaftaran.GrdPemeriksaan.RowCount - 2] := 'Y';

  // calculate total
  fTotal := 0;
  for I := 1 to frmPendaftaran.GrdPemeriksaan.rowcount do
  begin
    tmpStr := frmPendaftaran.GrdPemeriksaan.Cells[2, I];
    tmpStr := StringReplace(tmpStr, ',', '', [rfReplaceAll]);
    if tmpStr <> '' then
      fTotal := fTotal + StrToFloat(tmpStr);
  end;

  frmPendaftaran.edSubTotal.Text := FormatFloat('#,##0.00', fTotal);

  // discount
  tmpStr := frmPendaftaran.edDiscount.Text;
  tmpStr := StringReplace(tmpStr, ',', '', [rfReplaceAll]);
  frmPendaftaran.edDiscAmount.Text := FormatFloat('#,##0.00',
    (fTotal * (StrToFloat(tmpStr) / 100)));
  frmPendaftaran.edTotal.Text := FormatFloat('#,##0.00',
    StrToFloat(StringReplace(frmPendaftaran.edSubTotal.Text, ',', '',
    [rfReplaceAll])) - StrToFloat
    (StringReplace(frmPendaftaran.edDiscAmount.Text, ',', '', [rfReplaceAll])));

  loadInterview;

  frmPendaftaran.HideMask;
end;

function frmPendaftaran: TfrmPendaftaran;
begin
  Result := TfrmPendaftaran(UniMainModule.GetFormInstance(TfrmPendaftaran));
end;

procedure DeleteRow(ARowIndex: Integer; AGrid: TUniStringGrid);
var
  I, J, arr_idx: Integer;
  kode: String;
begin
  with AGrid do
  begin
    BeginUpdate;
    if (ARowIndex = rowcount) then
      rowcount := rowcount - 1
    else
    begin
      for I := ARowIndex to rowcount - 2 do
        for J := 0 to ColCount - 1 do
          Cells[J, I] := Cells[J, I + 1];

      rowcount := rowcount - 1;
    end;
    EndUpdate;
  end;

  calculate_total();
  loadInterview;
end;

procedure TfrmPendaftaran.btnCariPasienClick(Sender: TObject);
begin
  frmCariPasien.ShowModal();
end;

procedure TfrmPendaftaran.edCariTestChange(Sender: TObject);
begin
  { if edCariTest.Text <> '' then
    begin
    if QTest.Active then
    QTest.Active := False;
    QTest.SQL.Text := 'SELECT id,kode,nama FROM TEST WHERE ada_harga=' +
    QuotedStr('Y') + ' AND ( UPPER(nama) LIKE ' +
    QuotedStr('%' + UpperCase(edCariTest.Text) + '%') + ' OR kode LIKE ' +
    QuotedStr('%' + UpperCase(edCariTest.Text) + '%') + ' ) ORDER BY kode';
    QTest.Active := True;
    end;
  }
end;

procedure TfrmPendaftaran.edCariTestKeyPress(Sender: TObject; var Key: Char);
begin

  {
    if Key=VK_F1 then btnCariPasienClick(self);
    if Key=VK_F2 then btnCariDokterClick(self);
    if Key=VK_F3 then edTestClick(self);
    if Key=VK_F4 then btnDetailClick(self);
    if Key=VK_F5 then btnDeleteClick(self);
    if Key=VK_F6 then btnDiscountClick(self);
    if Key=VK_F7 then btnBayarClick(self);
    if Key=VK_F8 then btnClearClick(self);
    if Key=VK_F9 then btnNoRegClick(self);
    if Key=VK_ESCAPE then frmPendaftaran.Close;
  }
  if (Ord(Key) = VK_RETURN) then
  begin
    AddTest();
  end;

end;

procedure TfrmPendaftaran.edDiscAmountChange(Sender: TObject);
var
  fSubTotal, fDiscAmount, fDiscPer: Currency;
begin
  if edDiscAmount.Text <> '' then
  begin
    fSubTotal := StrToFloat(StringReplace(edSubTotal.Text, ',', '',
      [rfReplaceAll]));
    fDiscAmount := StrToFloat(StringReplace(edDiscAmount.Text, ',', '',
      [rfReplaceAll]));
    fDiscPer := fDiscAmount / fSubTotal * 100;
    edDiscount.Text := FormatFloat('#,##0.00', fDiscPer);
    edTotal.Text := FormatFloat('#,##0.00', fSubTotal - fDiscAmount);
  end;
end;

procedure TfrmPendaftaran.edDiscAmountKeyPress(Sender: TObject; var Key: Char);
begin
  if (Ord(Key) = VK_RETURN) then
  begin
    edDiscAmount.Text := FormatFloat('#,##0.00',
      StrToFloat(StringReplace(edDiscAmount.Text, ',', '', [rfReplaceAll])));
  end;
end;

procedure TfrmPendaftaran.edDiscountChange(Sender: TObject);
var
  fSubTotal, fDiscAmount: Currency;
begin
  if edDiscount.Text <> '' then
  begin
    fSubTotal := StrToFloat(StringReplace(edSubTotal.Text, ',', '',
      [rfReplaceAll]));
    fDiscAmount := fSubTotal * StrToFloat(edDiscount.Text) / 100;
    edDiscAmount.Text := FormatFloat('#,##0.00', fDiscAmount);
    edTotal.Text := FormatFloat('#,##0.00', fSubTotal - fDiscAmount);
  end;
end;

procedure TfrmPendaftaran.edDiscountKeyPress(Sender: TObject; var Key: Char);
begin
  {
    if Ord(Key)=VK_F1 then btnCariPasienClick(self);
    if Ord(Key)=VK_F2 then btnCariDokterClick(self);
    if Ord(Key)=VK_F3 then edTestClick(self);
    if Ord(Key)=VK_F4 then btnDetailClick(self);
    if Ord(Key)=VK_F5 then btnDeleteClick(self);
    if Ord(Key)=VK_F6 then btnDiscountClick(self);
    if Ord(Key)=VK_F7 then btnBayarClick(self);
    if Ord(Key)=VK_F8 then btnClearClick(self);
    if Ord(Key)=VK_F9 then btnNoRegClick(self);
    if Ord(Key)=VK_ESCAPE then frmPendaftaran.Close;
  }

  if (Ord(Key) = VK_RETURN) then
  begin
    btnBayar.SetFocus;
  end;
end;

procedure TfrmPendaftaran.edPasienIdChange(Sender: TObject);
begin
  if edPasienId.Text <> '' then
  begin
    pcPasien.Pages[1].Visible := True;
    pcPasien.Pages[2].Visible := True;
  end
  else
  begin
    pcPasien.Pages[1].Visible := False;
    pcPasien.Pages[2].Visible := False;
  end;
end;

procedure TfrmPendaftaran.edPatientIDKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_F1 then
    btnCariPasienClick(self);
  if Key = VK_F2 then
    btnCariDokterClick(self);
  if Key = VK_F3 then
    edTestClick(self);
  if Key = VK_F4 then
    btnDetailClick(self);
  if Key = VK_F5 then
    btnDeleteClick(self);
  if Key = VK_F6 then
    btnDiscountClick(self);
  if Key = VK_F7 then
    btnBayarClick(self);
  if Key = VK_F8 then
    btnClearClick(self);
  if Key = VK_F9 then
    btnNoRegClick(self);
  if Key = VK_ESCAPE then
    frmPendaftaran.Close;
end;

procedure TfrmPendaftaran.GrdPemeriksaanDrawCell(Sender: TObject;
  ACol, ARow: Integer; var Value: string; Attribs: TUniCellAttribs);
begin
  if (ACol = 2) and (ARow <> 0) then
    Attribs.Style.Style := 'text-align: right;';
end;

procedure TfrmPendaftaran.pnlFotoClick(Sender: TObject);
begin
  if edPasienId.Text <> '' then
  begin
    frmFotoPasien.pasien_id := StrToInt(edPasienId.Text);
    frmFotoPasien.call_from := 'pendaftaran';
    frmFotoPasien.ShowModal();
  end;
end;

procedure TfrmPendaftaran.pnlFotoMouseEnter(Sender: TObject);
begin
  if edPasienId.Text <> '' then
    pnlFoto.Cursor := crHandPoint
  else
    pnlFoto.Cursor := crDefault;
end;

procedure TfrmPendaftaran.UniButton1Click(Sender: TObject);
begin
  ShowMask('Loading');
  UniSession.Synchronize();
  if QPasien.Active then
    QPasien.Active := False;

  QPasien.Params.Clear;
  QPasien.Params.Add.Name := 'catatan';
  QPasien.Params.Add.Name := 'pasien_id';
  QPasien.SQL.Text :=
    'update pasien set catatan = :catatan where id = :pasien_id ';
  QPasien.ParamByName('catatan').Value := mmCatatanPasien.Lines.Text;
  QPasien.ParamByName('pasien_id').Value := edPasienId.Text;
  QPasien.ExecSQL;

  HideMask();
end;

procedure TfrmPendaftaran.uniDBGridKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_F1 then
    btnCariPasienClick(self);
  if Key = VK_F2 then
    btnCariDokterClick(self);
  if Key = VK_F3 then
    edTestClick(self);
  if Key = VK_F4 then
    btnDetailClick(self);
  if Key = VK_F5 then
    btnDeleteClick(self);
  if Key = VK_F6 then
    btnDiscountClick(self);
  if Key = VK_F7 then
    btnBayarClick(self);
  if Key = VK_F8 then
    btnClearClick(self);
  if Key = VK_F9 then
    btnNoRegClick(self);
  if Key = VK_ESCAPE then
    frmPendaftaran.Close;

  if Key = VK_RETURN then
    AddTest();

end;

procedure TfrmPendaftaran.btnClearClick(Sender: TObject);
var
  I, J: Integer;
begin
  edDokter.Text := '-';
  edSubTotal.Text := '0';
  edDiscount.Text := '0.00';
  edDiscAmount.Text := '0';
  edTotal.Text := '0';

  // pasien

  imFotoPasien.Picture.LoadFromFile(UniServerModule.FilesFolderPath +
    'foto-kosong.jpg');
  pcPasien.Pages[1].TabVisible := False;
  pcPasien.Pages[2].TabVisible := False;
  pcPasien.ActivePage.PageIndex := 0;
  edPasienId.Clear;
  edNama.Clear;
  edJenisKelaminId.Clear;
  edKelamin.Clear;
  edUmur.Clear;
  edAlamat.Clear;
  edTelp.Clear;
  edHp.Clear;
  edPatientID.Clear;

  // interview
  grdInterview.Cells[0, 0] := 'Pertanyaan';
  grdInterview.Cells[1, 0] := 'Jawaban';
  grdInterview.ColWidths[0] := 300;
  grdInterview.ColWidths[1] := 190;

  length_arr := 0;

  // order
  cbJanjiHasil.Checked := False;
  dtJanjiHasil.DateTime := IncDay(Now(), 1);
  dtJanjiHasil.enabled := False;
  cbHasilEmail.Checked := False;
  edHasilEmail.Clear;
  edHasilEmail.enabled := False;
  cbHasilWa.Checked := False;
  edHasilWa.Clear;
  edHasilWa.enabled := False;
  mmInternalNote.Clear;

  cbTest.Text := '';
  cbPaket.Text := '';

  // test
  for I := 0 to GrdPemeriksaan.rowcount do
  begin
    for J := 0 to GrdPemeriksaan.ColCount do
      GrdPemeriksaan.Cells[J, I] := '';
  end;
  loadInterview;

  GrdPemeriksaan.ColCount := 4;
  GrdPemeriksaan.rowcount := 2;
  GrdPemeriksaan.Cells[0, 0] := 'Kode';
  GrdPemeriksaan.Cells[1, 0] := 'Pemeriksaan';
  GrdPemeriksaan.Cells[2, 0] := 'Harga';
  GrdPemeriksaan.Cells[3, 0] := 'Cito';
  GrdPemeriksaan.ColWidths[0] := 100;
  GrdPemeriksaan.ColWidths[1] := 300;
  GrdPemeriksaan.ColWidths[2] := 100;
  GrdPemeriksaan.ColWidths[3] := 50;

  // pnlSumary.Height := 90;
  lblUangMuka.Visible := False;
  edUangMuka.Visible := False;

end;

procedure TfrmPendaftaran.btnDetailClick(Sender: TObject);
begin
  GrdPemeriksaan.SetFocus;
  GrdPemeriksaan.Row := 1;
end;

procedure TfrmPendaftaran.btnBayarClick(Sender: TObject);
var
  fTotal, fUangMuka: Currency;
begin
  if (edPasienId.Text <> '') and (edDokterId.Text <> '') then
  begin
    if (cbHasilEmail.Checked) and (edHasilEmail.Text = '') then
      showMessage('e-mail kosong.')
    else if (cbHasilWa.Checked) and (edHasilWa.Text = '') then
      showMessage('nomor whatsapp kosong.')
    else if checkInterviewKosong then
      showMessage('Jawaban interview masih kosong.')
    else if GrdPemeriksaan.rowcount > 2 then
    begin

      //
      if edUangMuka.Text = '' then
        edUangMuka.Text := '0';

      fTotal := StrToFloat(StringReplace(edTotal.Text, ',', '',
        [rfReplaceAll]));
      fUangMuka := StrToFloat(StringReplace(edUangMuka.Text, ',', '',
        [rfReplaceAll]));

      frmBayar.call_form := call_form;
      if frmBayar.qJenisPemb.Active then
        frmBayar.qJenisPemb.Active := False;
      frmBayar.qJenisPemb.Active := True;
      frmBayar.cbJenis.ItemIndex := 0;
      frmBayar.edCharge.Text := '0';
      frmBayar.edTotalBayar.Text := FormatFloat('#,##0.00', fTotal - fUangMuka);
      frmBayar.edTotal.Text := FormatFloat('#,##0.00', fTotal - fUangMuka);
      frmBayar.edPembayaran.Text := '0';
      frmBayar.edSisa.Text := '0';
      frmBayar.edTagihan.Text := FormatFloat('#,##0.00', fTotal - fUangMuka);

      // order_header_id
      if order_hdr_id <> '' then
      begin
        if QTmp.Active then
          QTmp.Active := False;
        QTmp.SQL.Text := ' SELECT * FROM order_header WHERE id = ' +
          QuotedStr(order_hdr_id);
        QTmp.Active := True;

        frmBayar.lblNoLab.Caption := 'No Lab : ' +
          QTmp.FieldByName('nomor').AsString;
        frmBayar.p_order_header_id := StrToInt(order_hdr_id);

      end;
      frmBayar.call_form := 'pendaftaran';
      frmBayar.ShowModal;
    end
    else
    begin
      showMessage('Pemeriksaan masih kosong.');
      // edCariTest.SetFocus;
    end;
  end
  else
  begin
    showMessage('Pasien dan/atau perujuk belum dipilih.');
  end;
end;

procedure TfrmPendaftaran.btnCariDokterClick(Sender: TObject);
begin
  frmCariDokter.ShowModal();
end;

procedure TfrmPendaftaran.edTestClick(Sender: TObject);
begin
  cbTest.SetFocus
end;

procedure TfrmPendaftaran.btnDeleteClick(Sender: TObject);
begin
  if (GrdPemeriksaan.Row > 0) and
    (GrdPemeriksaan.Row < GrdPemeriksaan.rowcount - 1) then
  begin
    MessageDlg('Delete : ' + GrdPemeriksaan.Cells[0, GrdPemeriksaan.Row] + ' - '
      + GrdPemeriksaan.Cells[1, GrdPemeriksaan.Row], mtConfirmation, mbYesNo,
      DeleteTestCallback);
  end;
end;

procedure TfrmPendaftaran.btnDiscountClick(Sender: TObject);
begin
  edDiscount.SetFocus;
end;

procedure TfrmPendaftaran.btnEditPasienClick(Sender: TObject);
var
  blob: TStream;
  Bmp: TBitmap;
  Jpg: TJPEGImage;
begin
  if edPasienId.Text <> '' then
  begin
    frmPasienBaru.call_form := 'pendaftaran';
    if QEditPasien.Active then
      QEditPasien.Active := False;
    QEditPasien.SQL.Text :=
      'select p.*,k.nama as kelamin_nama,pf.nama as pf_nama, ag.nama agama, ';
    QEditPasien.SQL.Text := QEditPasien.SQL.Text +
      'TIMESTAMPDIFF( YEAR, p.tanggal_lahir, now() ) as th,TIMESTAMPDIFF( MONTH, p.tanggal_lahir, now() ) % 12 as bl,FLOOR( TIMESTAMPDIFF( DAY, p.tanggal_lahir, now() ) % 30.4375 ) as hr ';
    QEditPasien.SQL.Text := QEditPasien.SQL.Text +
      ' from  pasien p, jenis_kelamin k, prefix pf, agama ag where p.id = ' +
      edPasienId.Text +
      ' and p.jenis_kelamin_id = k.id and p.prefix_id = pf.id and p.agama_id = ag.id   ';

    // ShowMessage(QEditPasien.SQL.Text);

    QEditPasien.Active := True;

    frmPasienBaru.pasien_id := QEditPasien.FieldByName('id').AsString;
    frmPasienBaru.edNama.Text := QEditPasien.FieldByName('nama').AsString;
    frmPasienBaru.edTelepon.Text := QEditPasien.FieldByName('telepon').AsString;
    frmPasienBaru.edHp.Text := QEditPasien.FieldByName('hp').AsString;
    frmPasienBaru.edEmail.Text := QEditPasien.FieldByName('email').AsString;
    frmPasienBaru.edNoKTP.Text := QEditPasien.FieldByName('no_ktp').AsString;
    frmPasienBaru.memoAlamat.Lines.Text :=
      QEditPasien.FieldByName('alamat').AsString;
    frmPasienBaru.edGoldar.Text := QEditPasien.FieldByName('gol_darah')
      .AsString;
    frmPasienBaru.edRhesus.Text := QEditPasien.FieldByName('rhesus').AsString;
    frmPasienBaru.edTglLahir.DateTime := QEditPasien.FieldByName
      ('tanggal_lahir').AsDateTime;

    frmPasienBaru.edThn.Text := QEditPasien.FieldByName('th').AsString;
    frmPasienBaru.edBln.Text := QEditPasien.FieldByName('bl').AsString;
    frmPasienBaru.edHr.Text := QEditPasien.FieldByName('hr').AsString;

    // agama
    frmPasienBaru.QAgama.Open;
    frmPasienBaru.QWilayah.Open;

    // foto
    if frmPasienBaru.QFoto.Active then
      frmPasienBaru.QFoto.Active := False;
    frmPasienBaru.QFoto.Params.Clear;
    frmPasienBaru.QFoto.Params.Add.Name := 'pasien_id';
    frmPasienBaru.QFoto.SQL.Text :=
      'select photo from pasien_photo where pasien_id = :pasien_id ';
    frmPasienBaru.QFoto.ParamByName('pasien_id').Value :=
      QEditPasien.FieldByName('id').AsString;
    frmPasienBaru.QFoto.Active := True;

    if frmPasienBaru.QFoto.RecordCount > 0 then
    begin
      Bmp := TBitmap.Create;
      blob := frmPasienBaru.QFoto.CreateBlobStream
        (frmPasienBaru.QFoto.FieldByName('photo'), bmRead);
      try
        Jpg := TJPEGImage.Create;
        try
          Jpg.LoadFromStream(blob);
          Bmp.Assign(Jpg);
          frmPasienBaru.imFoto.Assign(Bmp);
        finally
          Jpg.Free;
        end;
      finally
        blob.Free;
      end;
      Bmp.Free;
    end;

    frmPasienBaru.mmCatatan.Lines.Text :=
      QEditPasien.FieldByName('catatan').AsString;

    if frmPasienBaru.QPrefik.Active then
      frmPasienBaru.QPrefik.Active := False;
    frmPasienBaru.QPrefik.Active := True;
    if frmPasienBaru.QKelamin.Active then
      frmPasienBaru.QKelamin.Active := False;
    frmPasienBaru.QKelamin.Active := True;

    frmPasienBaru.pf_nama := QEditPasien.FieldByName('pf_nama').AsString;
    frmPasienBaru.kelamin_nama := QEditPasien.FieldByName
      ('kelamin_nama').AsString;
    frmPasienBaru.agama_nama := QEditPasien.FieldByName('agama').AsString;
    frmPasienBaru.wilayah_nama := QEditPasien.FieldByName('wilayah').AsString;

    frmPasienBaru.ShowModal();

  end;
end;

procedure TfrmPendaftaran.btnNoRegClick(Sender: TObject);
begin
  edPatientID.SetFocus;
end;

procedure TfrmPendaftaran.btnPTerakhirClick(Sender: TObject);
var
  I, J: Integer;
  mId: String;
  fTotal: Currency;
  tmpStr: String;
  RepUrl, Result: string;
  formatSettings: TFormatSettings;
begin
  ShowMask('Loading');
  UniSession.Synchronize();
  if btnPTerakhir.Caption = 'F10 Cetak Copy Nota' then
  begin

    if QNotaCopy.Active then
      QNotaCopy.Active := False;

    QNotaCopy.ParamByName('header_id').AsString := order_hdr_id;
    QNotaCopy.Active := True;

    frxRepNota.PrintOptions.ShowDialog := False;
    frxRepNota.ShowProgress := False;

    frxRepNota.EngineOptions.SilentMode := True;
    frxRepNota.EngineOptions.DestroyForms := False;

    frxPDFExport1.Background := True;
    frxPDFExport1.ShowProgress := False;
    frxPDFExport1.ShowDialog := False;
    frxPDFExport1.FileName := UniServerModule.NewCacheFileUrl(False, 'pdf', '',
      '', Result, True);
    frxPDFExport1.DefaultPath := '';

    frxRepNota.PreviewOptions.AllowEdit := False;
    frxRepNota.PrepareReport;
    frxRepNota.Export(frxPDFExport1);

    // frmReportDisplay.UniURLFrame1.URL := Result;
    // frmReportDisplay.ShowModal();

    UniSession.AddJS(printKuitansi(Result));

  end
  else
  begin

    if edPasienId.Text <> '' then
    begin
      if QPTerakhir.Active then
        QPTerakhir.Active := False;
      QPTerakhir.SQL.Text :=
        'select max(id) as mId from order_header where pasien_id = ' +
        QuotedStr(edPasienId.Text) + ' and flgBatal = ' + QuotedStr('N') + ' ';
      QPTerakhir.Active := True;
      mId := QPTerakhir.FieldByName('mId').AsString;
      if mId <> '' then
      begin

        for I := 0 to frmPendaftaran.GrdPemeriksaan.rowcount do
        begin
          for J := 0 to frmPendaftaran.GrdPemeriksaan.ColCount do
            frmPendaftaran.GrdPemeriksaan.Cells[J, I] := '';

        end;

        frmPendaftaran.GrdPemeriksaan.ColCount := 4;
        frmPendaftaran.GrdPemeriksaan.rowcount := 2;
        frmPendaftaran.GrdPemeriksaan.Cells[0, 0] := 'Kode';
        frmPendaftaran.GrdPemeriksaan.Cells[1, 0] := 'Pemeriksaan';
        frmPendaftaran.GrdPemeriksaan.Cells[2, 0] := 'Harga';
        frmPendaftaran.GrdPemeriksaan.Cells[3, 0] := 'Cito';
        frmPendaftaran.GrdPemeriksaan.ColWidths[0] := 100;
        frmPendaftaran.GrdPemeriksaan.ColWidths[1] := 300;
        frmPendaftaran.GrdPemeriksaan.ColWidths[2] := 100;
        frmPendaftaran.GrdPemeriksaan.ColWidths[3] := 50;

        if QPTerakhir.Active then
          QPTerakhir.Active := False;
        QPTerakhir.SQL.Text :=
          'select d.test_id from order_detail d, test t where d.test_id = t.id and t.ada_harga='
          + QuotedStr('Y') + ' and header_id = ' + QuotedStr(mId);
        QPTerakhir.Active := True;

        while not QPTerakhir.Eof do
        begin
          if QPTerakhirDtl.Active then
            QPTerakhirDtl.Active := False;
          QPTerakhirDtl.SQL.Text :=
            'select t.*,rt.flg_multi from test t left join ref_test rt on t.ref_test_id = rt.id where t.id = '
            + QPTerakhir.FieldByName('test_id').AsString + ' ';
          QPTerakhirDtl.Active := True;

          // tambahkan ke grid
          GrdPemeriksaan.rowcount := GrdPemeriksaan.rowcount + 1;
          GrdPemeriksaan.Cells[0, GrdPemeriksaan.rowcount - 2] :=
            QPTerakhirDtl.FieldByName('kode').AsString;
          frmPendaftaran.GrdPemeriksaan.Cells[1, GrdPemeriksaan.rowcount - 2] :=
            QPTerakhirDtl.FieldByName('nama').AsString;

          if QPTerakhirDtl.Active then
            QPTerakhirDtl.Active := False;
          QPTerakhirDtl.SQL.Text :=
            'select * from harga where tipe_pasien_id = 1 and urgency_id = 1 and test_id = '
            + QPTerakhir.FieldByName('test_id').AsString + ' ';
          QPTerakhirDtl.Active := True;

          // tambahkan ke grid
          frmPendaftaran.GrdPemeriksaan.Cells[2, GrdPemeriksaan.rowcount - 2] :=
            FormatFloat('#,##0.00',
            StrToFloat(QPTerakhirDtl.FieldByName('harga').AsString));
          // if cbCito.ItemIndex = frmPendaftaran.cbCito.Items.IndexOf('NORMAL')
          // then
          GrdPemeriksaan.Cells[3, GrdPemeriksaan.rowcount - 2] := 'N';
          // else
          // GrdPemeriksaan.Cells[3, GrdPemeriksaan.RowCount - 2] := 'Y';

          // calculate total
          fTotal := 0;
          for I := 1 to GrdPemeriksaan.rowcount do
          begin
            tmpStr := GrdPemeriksaan.Cells[2, I];
            tmpStr := StringReplace(tmpStr, ',', '', [rfReplaceAll]);
            if tmpStr <> '' then
              fTotal := fTotal + StrToFloat(tmpStr);
          end;

          edSubTotal.Text := FormatFloat('#,##0.00', fTotal);

          // discount
          tmpStr := edDiscount.Text;
          tmpStr := StringReplace(tmpStr, ',', '', [rfReplaceAll]);
          edDiscAmount.Text := FormatFloat('#,##0.00',
            (fTotal * (StrToFloat(tmpStr) / 100)));
          edTotal.Text := FormatFloat('#,##0.00',
            StrToFloat(StringReplace(edSubTotal.Text, ',', '', [rfReplaceAll]))
            - StrToFloat(StringReplace(edDiscAmount.Text, ',', '',
            [rfReplaceAll])));

          // select n.*,s.konversi from nilai_normal n  left join satuan_umur s on n.umur_satuan_id = s.id  where test_id=207 order by flg_kelamin_umur desc, flg_umur desc, flg_kelamin desc ,flg_text desc
          // n.*,s.konversi from nilai_normal n  left join satuan_umur s on n.umur_satuan_id = s.id  where test_id=207 order by flg_kelamin_umur desc, flg_umur desc, flg_kelamin desc ,flg_text desc
          // select * from nilai_normal where id =207
          // select * from harga where tipe_pasien_id=1 and urgency_id=1 and test_id=207

          QPTerakhir.Next;
        end;

      end;
      loadInterview;
    end;

  end;
  HideMask;
end;

procedure TfrmPendaftaran.btnTglSelesaiClick(Sender: TObject);
begin
  frmTanggalSelesai.ShowModal();
end;

procedure TfrmPendaftaran.cbTestKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_RETURN then
  begin
    AddTest();
    cbTest.Text := '';
  end;
  if (Key = VK_F1) and btnCariPasien.enabled then
    btnCariPasienClick(self);
  if Key = VK_F2 then
    btnCariDokterClick(self);
  if Key = VK_F3 then
    edTestClick(self);
  if Key = VK_F4 then
    btnDetailClick(self);
  if Key = VK_F5 then
    btnDeleteClick(self);
  if Key = VK_F6 then
    btnDiscountClick(self);
  if (Key = VK_F7) and btnBayar.enabled then
    btnBayarClick(self);
  if Key = VK_F8 then
    btnClearClick(self);
  if Key = VK_F9 then
    btnNoRegClick(self);
  if Key = VK_F11 then
    btnEditPasienClick(self);
  if Key = VK_F12 then
    btnTglSelesaiClick(self);
  if Key = VK_ESCAPE then
    frmPendaftaran.Close;
end;

procedure TfrmPendaftaran.cbHasilEmailChange(Sender: TObject);
begin
  if cbHasilEmail.Checked then
  begin
    edHasilEmail.enabled := True;
  end
  else
  begin
    edHasilEmail.enabled := False;
  end;
end;

procedure TfrmPendaftaran.cbHasilWaChange(Sender: TObject);
begin
  if cbHasilWa.Checked then
  begin
    edHasilWa.enabled := True;
  end
  else
  begin
    edHasilWa.enabled := False;
  end;
end;

procedure TfrmPendaftaran.cbJanjiHasilChange(Sender: TObject);
begin
  if cbJanjiHasil.Checked then
  begin
    dtJanjiHasil.enabled := True;
  end
  else
  begin
    dtJanjiHasil.enabled := False;
  end;
end;

procedure TfrmPendaftaran.cbPaketSelect(Sender: TObject);
var
  I, J, id_tes: Integer;
  fTotal: Currency;
  tmpStr: String;
  formatSettings: TFormatSettings;
begin
  ShowMask('Loading');
  UniSession.Synchronize();

  for I := 0 to frmPendaftaran.GrdPemeriksaan.rowcount do
  begin
    for J := 0 to frmPendaftaran.GrdPemeriksaan.ColCount do
      frmPendaftaran.GrdPemeriksaan.Cells[J, I] := '';

  end;

  frmPendaftaran.GrdPemeriksaan.ColCount := 4;
  frmPendaftaran.GrdPemeriksaan.rowcount := 2;
  frmPendaftaran.GrdPemeriksaan.Cells[0, 0] := 'Kode';
  frmPendaftaran.GrdPemeriksaan.Cells[1, 0] := 'Pemeriksaan';
  frmPendaftaran.GrdPemeriksaan.Cells[2, 0] := 'Harga';
  frmPendaftaran.GrdPemeriksaan.Cells[3, 0] := 'Cito';
  frmPendaftaran.GrdPemeriksaan.ColWidths[0] := 100;
  frmPendaftaran.GrdPemeriksaan.ColWidths[1] := 300;
  frmPendaftaran.GrdPemeriksaan.ColWidths[2] := 100;
  frmPendaftaran.GrdPemeriksaan.ColWidths[3] := 50;

  if QPaketDetail.Active then
    QPaketDetail.Active := False;
  QPaketDetail.ParamByName('panel_header_id').Value := QPaket.FieldByName('id')
    .AsInteger;
  QPaketDetail.ParamByName('urgency_id').Value := 1;
  QPaketDetail.ParamByName('tipe_pasien_id').Value := 1;
  QPaketDetail.Active := True;

  GetLocaleFormatSettings(LOCALE_SYSTEM_DEFAULT, formatSettings);

  QPaketDetail.First;
  while not QPaketDetail.Eof do
  begin

    // tambahkan ke grid
    frmPendaftaran.GrdPemeriksaan.rowcount :=
      frmPendaftaran.GrdPemeriksaan.rowcount + 1;
    frmPendaftaran.GrdPemeriksaan.Cells
      [0, frmPendaftaran.GrdPemeriksaan.rowcount - 2] :=
      QPaketDetail.FieldByName('kode').AsString;
    frmPendaftaran.GrdPemeriksaan.Cells
      [1, frmPendaftaran.GrdPemeriksaan.rowcount - 2] :=
      QPaketDetail.FieldByName('nama').AsString;

    // tambahkan ke grid
    frmPendaftaran.GrdPemeriksaan.Cells
      [2, frmPendaftaran.GrdPemeriksaan.rowcount - 2] :=
      FormatFloat('#,##0.00', StrToFloat(QPaketDetail.FieldByName('harga')
      .AsString));
    frmPendaftaran.GrdPemeriksaan.Cells
      [3, frmPendaftaran.GrdPemeriksaan.rowcount - 2] := 'N';
    QPaketDetail.Next;
  end;
  // calculate total
  fTotal := 0;
  for I := 1 to frmPendaftaran.GrdPemeriksaan.rowcount do
  begin
    tmpStr := frmPendaftaran.GrdPemeriksaan.Cells[2, I];
    tmpStr := StringReplace(tmpStr, ',', '', [rfReplaceAll]);
    if tmpStr <> '' then
      fTotal := fTotal + StrToFloat(tmpStr);
  end;

  frmPendaftaran.edSubTotal.Text := FormatFloat('#,##0.00', fTotal);

  if QPaket.FieldByName('disc_pct').AsInteger > 0 then
  begin
    edDiscount.Text := QPaket.FieldByName('disc_pct').AsString;
    calculate_total();
  end
  else

    if QPaket.FieldByName('disc_amount').AsInteger > 0 then
  begin
    edDiscAmount.Text := FormatFloat('#,##0.00',
      QPaket.FieldByName('disc_amount').AsFloat);
    edDiscAmountChange(self);
  end
  else
  begin
    edDiscount.Text := '0.00';
  end;

  loadInterview;
  calculate_total;
  HideMask;

end;

procedure TfrmPendaftaran.UniFormBeforeShow(Sender: TObject);
var
  thn, bln, tgl, jam, menit, detik, ms: Word;
begin
  decodetime(Now, jam, menit, detik, ms);

  tgl_hasil := Now;
  if call_form = 'home_service' then
  begin
    btnCariPasien.enabled := False;
    edDokter.Text := '-';
    // cbTipePasien.ItemIndex := cbTipePasien.Items.IndexOf('REGULER');
    // cbTipeHasil.ItemIndex := cbTipeHasil.Items.IndexOf('AMBIL SENDIRI');
    // cbCito.ItemIndex := cbCito.Items.IndexOf('NORMAL');
    // cbAsal.ItemIndex := cbAsal.Items.IndexOf('-');
    // cbPenjamin.ItemIndex := cbPenjamin.Items.IndexOf('-');
    // cbRuangan.ItemIndex := cbPenjamin.Items.IndexOf('-');
    // cbPerujuk.ItemIndex := cbPenjamin.Items.IndexOf('-');
    edSubTotal.Text := '0';
    edDiscount.Text := '0.00';
    edDiscAmount.Text := '0';
    edTotal.Text := '0';
  end
  else
  begin

    if (edPasienId.Text = '') and (edNama.Text = '') then
      btnClearClick(self)
    else
    begin
      // show data
      // cbTipePasien.ItemIndex := cbTipePasien.Items.IndexOf(tipe_pasien);
      // cbTipeHasil.ItemIndex := cbTipeHasil.Items.IndexOf(tipe_hasil);
      // cbCito.ItemIndex := cbCito.Items.IndexOf(urgency);
      // cbAsal.ItemIndex := cbAsal.Items.IndexOf(asal);
      // cbPenjamin.ItemIndex := cbPenjamin.Items.IndexOf(penjamin);
      // cbRuangan.ItemIndex := cbRuangan.Items.IndexOf(ruangan);
      // cbPerujuk.ItemIndex := cbPerujuk.Items.IndexOf(perujuk);
    end;
  end;

  // mmCatatanPasien.Top := 68;
  // mmCatatanPasien.Height := 90;
  // mmInternalNote.Top := 68;
  // mmInternalNote.Height := 90;
  if jam > 14 then
    decodedatetime(IncDay(Now(), 1), thn, bln, tgl, jam, menit, detik, ms)
  else
    decodedatetime(Now(), thn, bln, tgl, jam, menit, detik, ms);
  dtJanjiHasil.DateTime := encodedatetime(thn, bln, tgl, 16, 0, 0, 0);

  imFotoPasien.Picture.LoadFromFile(UniServerModule.FilesFolderPath +
    'foto-kosong.jpg');
  pcPasien.Pages[1].TabVisible := False;
  pcPasien.Pages[2].TabVisible := False;
  pcPasien.ActivePage.PageIndex := 0;
  //
  grdInterview.Cells[0, 0] := 'Pertanyaan';
  grdInterview.Cells[1, 0] := 'Jawaban';
  grdInterview.ColWidths[0] := 300;
  grdInterview.ColWidths[1] := 190;

  length_arr := 0;
end;

procedure TfrmPendaftaran.UniFormCreate(Sender: TObject);
begin
  GrdPemeriksaan.Cells[0, 0] := 'Kode';
  GrdPemeriksaan.Cells[1, 0] := 'Pemeriksaan';
  GrdPemeriksaan.Cells[2, 0] := 'Harga';
  GrdPemeriksaan.Cells[3, 0] := 'Cito';
  GrdPemeriksaan.ColWidths[0] := 100;
  GrdPemeriksaan.ColWidths[1] := 300;
  GrdPemeriksaan.ColWidths[2] := 100;
  GrdPemeriksaan.ColWidths[3] := 50;

  // database
  QTest.Open();
  // QTipePasien.Open();
  // QTipeHasil.Open();
  // QCito.Open();
  // QAsal.Open();
  // qAnsuransi.Open();
  // qRuangan.Open();
  QPaket.Open();
  // QPerujuk.Open();
  // uniDBGrid.SetFocus;

end;

procedure TfrmPendaftaran.UniFormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if (Key = VK_F1) and btnCariPasien.enabled then
    btnCariPasienClick(self);
  if Key = VK_F2 then
    btnCariDokterClick(self);
  if Key = VK_F3 then
    edTestClick(self);
  if Key = VK_F4 then
    btnDetailClick(self);
  if Key = VK_F5 then
    btnDeleteClick(self);
  if Key = VK_F6 then
    btnDiscountClick(self);
  if (Key = VK_F7) and btnBayar.enabled then
    btnBayarClick(self);
  if Key = VK_F8 then
    btnClearClick(self);
  if Key = VK_F9 then
    btnNoRegClick(self);
  if Key = VK_F11 then
    btnEditPasienClick(self);
  if Key = VK_F12 then
    btnTglSelesaiClick(self);
  if Key = VK_ESCAPE then
    frmPendaftaran.Close;

  if (Key = VK_DOWN) or (Key = VK_UP) then
  begin
    // uniDBGrid.SetFocus;
  end;

end;

procedure TfrmPendaftaran.DeleteTestCallback(Sender: TComponent; Res: Integer);
begin
  case Res of
    mrYes:
      DeleteRow(GrdPemeriksaan.Row, GrdPemeriksaan);
    // mrNo : UniMemo1.Lines.Add('DResult: NO');
  end;
end;

end.
